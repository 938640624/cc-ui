#  全局配置main
# user  用来指定nginx worker进程运行用户以及用户组，默认nobody账号运行
user  nginx;
# worker_processes  指定nginx要开启的子进程数量，运行过程中监控每个进程消耗内存，根据实际情况进行调整，
# 通常数量是CPU内核数量的整数倍
worker_processes  1;
# error_log 定义错误日记文件的位置以及输出级别
error_log  /var/log/nginx/error.log warn;
# pid 用来指定进程id的存储文件的位置
pid        /var/run/nginx.pid;
# worker_rlimit_nofile    用于指定一个进程可以打开最多文件数量的描述
#  工作模式配置
events {
  # worker_connections    指定最大可以同时接收的连接数量，这里一定要注意，最大连接数量是和worker processes共同决定的
  worker_connections  1024;
  # multi_accept    配置指定nginx在收到一个新连接通知后尽可能多的接受更多的连接
  # use epoll    配置指定了线程轮询的方法，如果是linux2.6+，使用epoll，如果是BSD如Mac请使用Kqueue
}
#  http配置
http {
  # sendfile on：配置on让sendfile发挥作用，将文件的回写过程交给数据缓冲去去完成，而不是放在应用中完成，这样的话在性能提升有有好处
  # tcp_nopush on：让nginx在一个数据包中发送所有的头文件，而不是一个一个单独发
  # tcp_nodelay on：让nginx不要缓存数据，而是一段一段发送，如果数据的传输有实时性的要求的话可以配置它，发送完一小段数据就立刻能得到返回值，但是不要滥用哦

  # keepalive_timeout 10：给客户端分配连接超时时间，服务器会在这个时间过后关闭连接。一般设置时间较短，可以让nginx工作持续性更好
  # client_header_timeout 10：设置请求头的超时时间
  # client_body_timeout 10:设置请求体的超时时间
  # send_timeout 10：指定客户端响应超时时间，如果客户端两次操作间隔超过这个时间，服务器就会关闭这个链接

  # limit_conn_zone $binary_remote_addr zone=addr:5m ：设置用于保存各种key的共享内存的参数，
  # limit_conn addr 100: 给定的key设置最大连接数

  # server_tokens：虽然不会让nginx执行速度更快，但是可以在错误页面关闭nginx版本提示，对于网站安全性的提升有好处哦
  # include /etc/nginx/mime.types：指定在当前文件中包含另一个文件的指令
  # default_type application/octet-stream：指定默认处理的文件类型可以是二进制
  # type_hash_max_size 2048：混淆数据，影响三列冲突率，值越大消耗内存越多，散列key冲突率会降低，检索速度更快；值越小key，占用内存较少，冲突率越高，检索速度变慢
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;
  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
  access_log  /var/log/nginx/access.log  main;
  sendfile        on;
  keepalive_timeout  65;
  # 服务器主机配置（虚拟主机、反向代理等）,作为http模块中的一个子模块，用来定义一个虚拟访问主机，也就是虚拟服务器的配置信息
  # server：一个虚拟主机的配置，一个http中可以配置多个server
  # server_name：用来指定ip地址或者域名，多个配置之间用空格分隔
  # charset：用于设置www/路径中配置的网页的默认编码格式
  # access_log：用于指定该虚拟主机服务器中的访问记录日志存放路径
  # error_log：用于指定该虚拟主机服务器中访问错误日志的存放路径
  server {
    listen       80;  # 端口
    server_name  localhost; # 域名
    # 路由配置（虚拟目录等），关联到反向代理、负载均衡等功能
    location / {
      # location /：表示匹配访问根目录
      # root：用于指定访问根目录时，访问虚拟主机的web目录
      # index：在不指定访问具体资源时，默认展示的资源文件列表
      root   /app;
      index  index.html;
      try_files $uri $uri/ /index.html;
    }

    # 代理配置，解决跨域问题，通过proxy_set进行反向代理服务器访问，让客户端访问变透明
    # 反向代理：客户端通过HTTP协议访问网址应用服务器，如果在这中间加Nginx,客户端请求Nginx,Nginx请求应用服务器，然后将结果返回给客户端，此时Nginx就是反向代理服务器
    location /auth {
        proxy_pass http://36.155.113.204:19999; # 应用服务器HTTP地址
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {  # 项目根目录
      root   /usr/share/nginx/html; # 虚拟目录
    }

    # 负载均衡模块（upstream）：负责负载均衡的配置，
    # 通过默认的轮询调度方式来分发请求到后端服务器
    # 网站访问量大的时候将相同的应用部署在多台服务器上，将大量用户请求分配给多台机器处理，其中一台挂了其他服务器还能正常运行，Nginx可通过反向代理来实现负载均衡
    # ip_hash：指定请求调度算法，默认是weight权重轮询调度，可以指定
    # server host:port：分发服务器的列表配置
    # -- down：表示该主机暂停服务
    # -- max_fails：表示失败最大次数，超过失败最大次数暂停服务
    # -- fail_timeout：表示如果请求受理失败，暂停指定的时间之后重新发起请求
    # upstream name {
    #   ip_hash;
    #   server 192.168.1.100:8000;
    #   server 192.168.1.100:8001 down;
    #   server 192.168.1.100:8002 max_fails=3;
    #   server 192.168.1.100:8003 fail_timeout=20s;
    #   server 192.168.1.100:8004 max_fails=3 fail_timeout=20s;
    # }
  }
}
